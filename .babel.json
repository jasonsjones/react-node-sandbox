{
  "{\"filename\":\"/home/blacktab/src/server.js\",\"env\":{},\"retainLines\":true,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[],\"plugins\":[[[],{\"loose\":false,\"spec\":false}],[[],null],[[],null],[[],{\"spec\":false}],[[],null],[[],{\"loose\":false}],[[],null],[[],null],[[],null],[[],{\"loose\":false}],[[],{\"loose\":false}],[[],null],[[],null],[[],null],[[],{\"loose\":false}],[[],null],[[],{\"loose\":false}],[[],null],[[],null],[[],{\"loose\":false}],[[],{\"async\":false,\"asyncGenerators\":false}]],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceMaps\":true,\"sourceRoot\":\"/home/blacktab/src\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":false,\"parserOpts\":false,\"generatorOpts\":false}:6.25.0": {
    "metadata": {
      "usedHelpers": [
        "interopRequireDefault"
      ],
      "marked": [],
      "modules": {
        "imports": [
          {
            "source": "express",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "express"
              }
            ]
          },
          {
            "source": "body-parser",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "bodyParser"
              }
            ]
          },
          {
            "source": "mongoose",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "mongoose"
              }
            ]
          },
          {
            "source": "multer",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "multer"
              }
            ]
          },
          {
            "source": "fs",
            "imported": [
              "default"
            ],
            "specifiers": [
              {
                "kind": "named",
                "imported": "default",
                "local": "fs"
              }
            ]
          }
        ],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/home/blacktab/src/server.js",
      "filenameRelative": "/home/blacktab/src/server.js",
      "env": {},
      "retainLines": true,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [],
      "plugins": [
        [
          [],
          {
            "loose": false,
            "spec": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "spec": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          null
        ],
        [
          [],
          null
        ],
        [
          [],
          {
            "loose": false
          }
        ],
        [
          [],
          {
            "async": false,
            "asyncGenerators": false
          }
        ]
      ],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "server.js",
      "sourceFileName": "server.js",
      "sourceRoot": "/home/blacktab/src",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/home/blacktab/src",
      "moduleIds": false,
      "passPerPreset": false,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "server"
    },
    "ignored": false,
    "code": "'use strict';\nvar _express = require('express');var _express2 = _interopRequireDefault(_express);\nvar _bodyParser = require('body-parser');var _bodyParser2 = _interopRequireDefault(_bodyParser);\nvar _mongoose = require('mongoose');var _mongoose2 = _interopRequireDefault(_mongoose);\nvar _multer = require('multer');var _multer2 = _interopRequireDefault(_multer);\nvar _fs = require('fs');var _fs2 = _interopRequireDefault(_fs);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar app = (0, _express2.default)();\nvar Schema = _mongoose2.default.Schema;\n\napp.use(_bodyParser2.default.json());\napp.use(_bodyParser2.default.urlencoded({ extended: false }));\n\n_mongoose2.default.connect('mongodb://mongo/testdb');\nvar db = _mongoose2.default.connection;\ndb.once('open', function () {\n    console.log('Connected to mongo');\n});\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.on('disconnected', function () {\n    console.log('Mongoose disconnected');\n});\nprocess.on('SIGINT', function () {\n    db.close(function () {\n        console.log('Mongoose default connection closed via app termination');\n        process.exit(0);\n    });\n});\n\nvar avatarSchema = new Schema({\n    fileName: String,\n    contentType: String,\n    data: Buffer,\n    defaultImg: Boolean });\n\n\nvar Avatar = _mongoose2.default.model('Avatar', avatarSchema);\n\nvar userSchema = new Schema({ name: String,\n    email: String,\n    avatar: { type: Schema.Types.ObjectId, ref: 'Avatar' },\n    avatarUrl: String });\n\n\nvar User = _mongoose2.default.model('User', userSchema);\n\nvar upload = (0, _multer2.default)({ dest: './uploads/' });\n\napp.get('/', function (req, res) {\n    res.json({\n        message: 'Welcome to the API!' });\n\n});\n\napp.get('/api/avatar', function (req, res) {\n    Avatar.find({}, '-data', function (err, avatars) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({\n            status: true,\n            data: avatars });\n\n    });\n});\n\n\napp.post('/api/avatar', upload.single('avatar'), function (req, res) {\n    var avatar = new Avatar();\n    avatar.fileName = req.file.originalname;\n    avatar.contentType = req.file.mimetype;\n    avatar.defaultImg = false;\n    avatar.data = _fs2.default.readFileSync(req.file.path);\n    avatar.save(function (err, img) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        _fs2.default.unlinkSync(req.file.path);\n        res.json({ message: 'avatar uploaded and saved...' });\n\n    });\n});\n\napp.get('/api/avatar/:id', function (req, res) {\n    if (req.params.id === 'default') {\n        Avatar.find({ defaultImg: true }, '-data', function (err, images) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            res.json({ status: true, data: images });\n        });\n    } else {\n        Avatar.findById(req.params.id, function (err, avatar) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            res.contentType(avatar.contentType);\n            res.write(avatar.data);\n            res.end();\n        });\n    }\n});\n\napp.get('/api/users', function (req, res) {\n    User.find({}, function (err, users) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({ staus: true, data: users });\n    });\n});\n\napp.get('/api/user/:id', function (req, res) {\n    User.findOne({ _id: req.params.id }, function (err, user) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({ status: true, data: user });\n    });\n});\n\napp.post('/api/users', function (req, res) {\n    var newUser = new User(req.body);\n    newUser.save(function (err, user) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({ message: 'new user saved', data: user });\n    });\n});\n\napp.post('/api/user/:userid/avatar', upload.single('avatar'), function (req, res) {\n    User.findOne({ _id: req.params.userid }, function (err, user) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        var avatar = new Avatar();\n        avatar.fileName = req.file.originalname;\n        avatar.contentType = req.file.mimetype;\n        avatar.defaultImg = false;\n        avatar.data = _fs2.default.readFileSync(req.file.path);\n        avatar.save(function (err, img) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            _fs2.default.unlinkSync(req.file.path);\n            user.avatar = img._id;\n            user.avatarUrl = 'http://localhost:3000/api/avatar/' + img._id;\n            user.save(function (err, user) {\n                if (err) {\n                    console.log(err);\n                    return;\n                }\n                res.json({ message: 'avatar uploaded...', data: user });\n            });\n        });\n    });\n});\n\napp.listen(3000, function () {\n    console.log('node server running on port 3000');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "Schema",
        "use",
        "json",
        "urlencoded",
        "extended",
        "connect",
        "db",
        "connection",
        "once",
        "console",
        "log",
        "on",
        "error",
        "bind",
        "process",
        "close",
        "exit",
        "avatarSchema",
        "fileName",
        "String",
        "contentType",
        "data",
        "Buffer",
        "defaultImg",
        "Boolean",
        "Avatar",
        "model",
        "userSchema",
        "name",
        "email",
        "avatar",
        "type",
        "Types",
        "ObjectId",
        "ref",
        "avatarUrl",
        "User",
        "upload",
        "dest",
        "get",
        "req",
        "res",
        "message",
        "find",
        "err",
        "avatars",
        "status",
        "post",
        "single",
        "file",
        "originalname",
        "mimetype",
        "readFileSync",
        "path",
        "save",
        "img",
        "unlinkSync",
        "params",
        "id",
        "images",
        "findById",
        "write",
        "end",
        "users",
        "staus",
        "findOne",
        "_id",
        "user",
        "newUser",
        "body",
        "userid",
        "listen"
      ],
      "mappings": "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",
      "file": "server.js",
      "sourceRoot": "/home/blacktab/src",
      "sourcesContent": [
        "\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport mongoose from 'mongoose';\nimport multer from 'multer';\nimport fs from 'fs';\n\nconst app = express();\nconst Schema = mongoose.Schema;\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n\nmongoose.connect('mongodb://mongo/testdb');\nlet db = mongoose.connection;\ndb.once('open', function () {\n    console.log(`Connected to mongo`);\n});\ndb.on('error', console.error.bind(console, 'connection error'));\ndb.on('disconnected', () => {\n    console.log(`Mongoose disconnected`);\n});\nprocess.on('SIGINT', () => {\n    db.close(() => {\n        console.log('Mongoose default connection closed via app termination');\n        process.exit(0);\n    });\n});\n\nconst avatarSchema = new Schema({\n    fileName: String,\n    contentType: String,\n    data: Buffer,\n    defaultImg: Boolean\n});\n\nconst Avatar = mongoose.model('Avatar', avatarSchema);\n\nconst userSchema = new Schema({ name: String,\n    email: String,\n    avatar: {type: Schema.Types.ObjectId, ref: 'Avatar'},\n    avatarUrl: String\n});\n\nconst User = mongoose.model('User', userSchema);\n\nconst upload = multer({dest: './uploads/'});\n\napp.get('/', (req, res) => {\n    res.json({\n        message: 'Welcome to the API!'\n    });\n});\n\napp.get('/api/avatar', (req, res) => {\n    Avatar.find({}, '-data', function (err, avatars) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({\n            status: true,\n            data: avatars\n        });\n    });\n});\n\n\napp.post('/api/avatar', upload.single('avatar'), (req, res) => {\n    let avatar = new Avatar();\n    avatar.fileName = req.file.originalname;\n    avatar.contentType = req.file.mimetype;\n    avatar.defaultImg = false;\n    avatar.data = fs.readFileSync(req.file.path);\n    avatar.save(function (err, img) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        fs.unlinkSync(req.file.path);\n        res.json({message: 'avatar uploaded and saved...'});\n\n    });\n});\n\napp.get('/api/avatar/:id', (req, res) => {\n    if (req.params.id === 'default') {\n        Avatar.find({defaultImg: true}, '-data', function (err, images) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            res.json({status: true, data: images});\n        });\n    } else {\n        Avatar.findById(req.params.id, function (err, avatar) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            res.contentType(avatar.contentType);\n            res.write(avatar.data);\n            res.end();\n        });\n    }\n});\n\napp.get('/api/users', (req, res) => {\n    User.find({}, function (err, users) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({staus: true, data: users});\n    });\n});\n\napp.get('/api/user/:id', (req, res) => {\n    User.findOne({_id: req.params.id}, function (err, user) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({status: true, data: user});\n    });\n});\n\napp.post('/api/users', (req, res) => {\n    let newUser = new User(req.body);\n    newUser.save(function (err, user) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        res.json({message: 'new user saved', data: user});\n    });\n});\n\napp.post('/api/user/:userid/avatar', upload.single('avatar'), (req, res) => {\n    User.findOne({_id: req.params.userid}, function (err, user) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        let avatar = new Avatar();\n        avatar.fileName = req.file.originalname;\n        avatar.contentType = req.file.mimetype;\n        avatar.defaultImg = false;\n        avatar.data = fs.readFileSync(req.file.path);\n        avatar.save(function (err, img) {\n            if (err) {\n                console.log(err);\n                return;\n            }\n            fs.unlinkSync(req.file.path);\n            user.avatar = img._id;\n            user.avatarUrl = `http://localhost:3000/api/avatar/${img._id}`;\n            user.save(function (err, user) {\n                if (err) {\n                    console.log(err);\n                    return;\n                }\n                res.json({message: 'avatar uploaded...', data: user});\n            });\n        });\n    });\n});\n\napp.listen(3000, () => {\n    console.log(`node server running on port 3000`);\n});"
      ]
    },
    "mtime": 1500740544000
  }
}